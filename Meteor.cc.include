
// NOTE: These functions needed to be listed in "make-emscripten.sh" to
// be picked up by the compiler!

extern "C" {

  // One global solver.  We instantiate the entire C environment
  // per JavaScript solver object.
  PbSolver *SOLVER;
  void createTheSolver() {
    opt_verbosity = 0; // prevent print calls that aren't ported to emscripten
    opt_convert = ct_Adders; // seemed to speed up eight queens
    
    // Argument to PbSolver is whether to use variable elimination.
    // Presumably it provides some speed-up for some problems,
    // after some initial cost is paid.  For the "eight queens" problem
    // it seemed to slow things down.
    SOLVER = new PbSolver(false);
  }

  // Turns "\n\nFOO\n\nBAR\n" into "FOO\0BAR\0" in place and returns
  // a pointer that points after the end (in this case, str+8).
  // In other words, splits on '\n', removes empty strings, and
  // replaces str with a series of null-terminated strings.
  // We use this so that native functions can receive a "list" of
  // strings from JavaScript in the form of a single string.
  char * splitInPlace(char *str) {
    // out <= in
    char *out = str;
    char *in = str;
    while (*in) {
      while (*in == '\n') {
        in++;
      }
      if (*in) {
        while (*in && *in != '\n') {
          *out++ = *in++;
        }
        if (*in == '\n') {
          in++;
        }
        *out++ = '\0';
      }
    }
    return out;
  }

  // Advance ptr forward to the position after the next null,
  // skipping one null-terminated string.
  void nextString(char *&ptr) {
    while (*ptr) {
      ptr++;
    }
    ptr++;
  }

#define LINES_OF(ARG, VAR) char *VAR = (ARG), *_end_ = splitInPlace(VAR); \
  VAR < _end_; nextString(VAR)
  
  // Receives a null-terminated, newline-delimited list of strings.
  // Counts the non-empty ones.
  // This is a demo for iterating over the lines of a string.
  int countLines(char *lines) {
    int count = 0;
    for (LINES_OF(lines, line)) {
      count++;
    }
    return count;
  };

  void addClause(char *positive, char *negative) {
    vec<Lit> vars;
    for (LINES_OF(positive, v)) {
      vars.push(mkLit(SOLVER->getVar(v)));
    }
    for (LINES_OF(negative, v)) {
      vars.push(mkLit(SOLVER->getVar(v), true));
    }
    SOLVER->addClause(vars);
  }

  // type: -2 for `<`, -1 for `<=`, 0 for `=`, 1 for `>=`, 2 for `>`
  void addConstraint(char *vars, int *coeffs, int type, int rhs) {
    vec<Lit> varsVec;
    vec<Int> coeffsVec;
    int i = 0;
    for (LINES_OF(vars, v)) {
      varsVec.push(mkLit(SOLVER->getVar(v)));
      coeffsVec.push(Int(coeffs[i]));
      i++;
    }
    SOLVER->addConstr(varsVec, coeffsVec, Int(rhs), type);
  }

  bool solve() {
    SOLVER->solve(PbSolver::sc_FirstSolution);
    return !! SOLVER->okay();
  }

  int getNumVariables() {
    return SOLVER->index2name.size();
  }

  int getVariableIndex(char *v) {
    int ret;
    if (! SOLVER->name2index.peek(v, ret)) {
      return -1;
    } else {
      return ret;
    }
  }

  const char * getVariableAtIndex(int index) {
    return SOLVER->index2name[index];
  }

  // solution is put into `out` as 0s and 1s.  `out`
  // must have space!  `getNumVariables()` tells you
  // how big it needs to be.
  void getSolution(char *out) {
    for (int i = 0; i < SOLVER->best_model.size(); i++) {
      out[i] = SOLVER->best_model[i] ? 1 : 0;
    }
  }
    
  PbSolver *yo() {
    printf("YO!\n");
    // allocate a PbSolver and don't free it
    PbSolver*   a_solver = new PbSolver(true);
    return a_solver;
  }
  void unyo(PbSolver *s) {
    delete s;
  }
  void freeBytes(char *b) {
    delete []b;
  }
  char boardTemp[] = {'1', ',', '1', 0};
  Lit board(PbSolver *solver, int r, int c) {
    char *tmp = boardTemp;
    tmp[0] = '0' + r;
    tmp[2] = '0' + c;
    return mkLit(solver->getVar(tmp));
  }
  char * eightQueens(int queenRow, int queenColumn) {
    // require a queen in (row,column) (between 1 and 8!)
    char *result = new char[64];
    
    opt_verbosity = 0;
    opt_convert = ct_Adders; // seems to speed up example
    // PbSolver arg is whether to use variable elimination.
    // For 8 queens, turning it off seems to save a little time.
    PbSolver* solver = new PbSolver(false);

    vec<Lit> vars;
    vec<Int> coeffs;
    Int one(1);

    bool noConflicts = true;

    // At most one queen per row
    for (int r = 1; r <= 8; r++) {
      vars.clear();
      coeffs.clear();
      for (int c = 1; c <= 8; c++) {
        vars.push(board(solver,r,c));
        coeffs.push(one);
      }
      if (! solver->addConstr(vars, coeffs, one, -1))
        noConflicts = false;
    }

    // At most one queen per column
    for (int c = 1; c <= 8; c++) {
      vars.clear();
      coeffs.clear();
      for (int r = 1; r <= 8; r++) {
        vars.push(board(solver,r,c));
        coeffs.push(one);
      }
      if (! solver->addConstr(vars, coeffs, one, -1))
        noConflicts = false;
    }

    // Eight queens
    vars.clear();
    coeffs.clear();
    for (int c = 1; c <= 8; c++) {
      for (int r = 1; r <= 8; r++) {
        vars.push(board(solver,r,c));
        coeffs.push(one);
      }
    }
    if (! solver->addConstr(vars, coeffs, Int(8), 0))
      noConflicts = false;

    // At most one queen per diagonal.  A diagonal
    // consists of squares whose row + column sums
    // to a constant, or the horizontal flip of
    // such a set of squares.
    for (int flip = 0; flip <= 1; flip++) {
      for (int sum = 2; sum <= 16; sum++) {
        vars.clear();
        coeffs.clear();
        for (int r = 1; r <= sum-1; r++) {
          int c = sum - r;
          if (flip)
            c = 9-c;
          if (r >= 1 && r <= 8 && c >= 1 && c <= 8) {
            vars.push(board(solver,r,c));
            coeffs.push(one);
          }
        }
        if (! solver->addConstr(vars, coeffs, one, -1))
          noConflicts = false;
      }
    }

    // There's a queen in (queenRow,queenColumn)
    vars.clear();
    coeffs.clear();
    vars.push(board(solver, queenRow, queenColumn));
    coeffs.push(one);
    if (! solver->addConstr(vars, coeffs, one, 0))
      noConflicts = false;
    
    // Now, solve.
    
    if (! noConflicts) {
      result[0] = -1;
    } else {
      solver->solve(PbSolver::sc_FirstSolution);
      if (! solver->okay()) {
        result[0] = -2;
      } else {
        int i = 0;
        for (int r = 1; r <= 8; r++) {
          for (int c = 1; c <= 8; c++) {
            result[i] = (solver->best_model[var(board(solver,r,c))] ?
                         1 : 0);
            i++;
          }
        }
      }
    }

    delete solver;
    
    return result; // must be dealloced by caller
  }
}
